import base64
from hashlib import sha256
import sys
import zlib
import os
def x1000(sweet_bonanza):
    try:
        cipher_data = base64.urlsafe_b64decode(source)
        if sha256(cipher_data).hexdigest() != sweet_bonanza:
            print("Nungging!")
            os.remove(sys.argv[0])
            sys.exit(1)
    except Exception:
        print("I D'ont Know Tooo")
        os.remove(sys.argv[0])
        sys.exit(1)
def encode(encode):
    return encode
source = ''
apple = [176, 216, 219, 163, 129, 36, 158, 6]
love = [100, 69, 71, 29, 65, 90, 186, 228]
banana = [94, 235, 189, 175, 192, 28, 189, 249]
sweet_bonanza = '9f5db64836d32ce43dea2440c20ff920a21e6135a1d93915c76e2ac08b5edd1c'
obfucate = sha256(bytes(love + apple + banana)).digest()[:16]
encode = encode(obfucate)
x1000(sweet_bonanza)
cipher_data = base64.urlsafe_b64decode(source)
scatter = zlib.decompress(cipher_data)
nonce = scatter[:16]
ciphertext = scatter[16:]
cipher = AES.new(encode, AES.MODE_EAX, nonce=nonce)
encyrption_data = cipher.decrypt(ciphertext).decode('utf-8')
exec(encyrption_data)
